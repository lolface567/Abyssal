package org.bot.abyssal.service;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@Service
public class ShopService extends ListenerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(ShopService.class);
    private final UserCoinService userCoinService;
    private final ShopRolesService shopRolesService;

    @Autowired
    public ShopService(UserCoinService userCoinService, ShopRolesService shopRolesService) {
        this.userCoinService = userCoinService;
        this.shopRolesService = shopRolesService;
    }

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        if (event.getName().equals("shop")) {
            Member member = event.getMember();
            Guild guild = event.getGuild();
            Map<Long, Integer> roles = shopRolesService.getAllRolesWithPrices(); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏ –∏—Ö —Ü–µ–Ω

            if (roles.isEmpty()) {
                event.reply("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.").setEphemeral(true).queue();
                return;
            }

            assert member != null;
            EmbedBuilder embedBuilder = new EmbedBuilder()
                    .setTitle("üõí –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞")
                    .setColor(Color.CYAN)
                    .addField("\uD83D\uDCB0–í–∞—à –±–∞–ª–∞–Ω—Å: ", String.valueOf(userCoinService.getBalance(member.getIdLong())), false)
                    .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å'.");

            // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å —Ä–æ–ª—è–º–∏
            StringSelectMenu.Builder menu = StringSelectMenu.create("shop:select")
                    .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏");

            for (Map.Entry<Long, Integer> entry : roles.entrySet()) {
                assert guild != null;
                Role role = guild.getRoleById(entry.getKey());
                if (role != null) {
                    menu.addOption(role.getName() + " - " + entry.getValue() + " –º–æ–Ω–µ—Ç", role.getId());
                }
            }

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
            Button buyButton = Button.success("shop:buy", "–ö—É–ø–∏—Ç—å");

            event.replyEmbeds(embedBuilder.build())
                    .addActionRow(menu.build()) // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                    .addActionRow(buyButton)   // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
                    .setEphemeral(true)
                    .queue();
        }

        if (event.getName().equals("add_role_to_shop")) {
            long role_id;
            if (event.getOption("role_id") != null) {
                role_id = Objects.requireNonNull(event.getOption("role_id")).getAsLong();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å id —Ä–æ–ª–∏").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }
            int role_cost;
            if (event.getOption("role_cost") != null) {
                role_cost = Objects.requireNonNull(event.getOption("role_cost")).getAsInt();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ü–µ–Ω—É —Ä–æ–ª–∏").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }
            shopRolesService.addRole(role_id, role_cost);
            event.reply("–†–æ–ª—å: –¥–æ–±–∞–≤–ª–µ–Ω–∞").setEphemeral(true).queue();
        }

        if (event.getName().equals("remove_role_from_shop")) {
            long role_id;
            if (event.getOption("role_id") != null) {
                role_id = Objects.requireNonNull(event.getOption("role_id")).getAsLong();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å id —Ä–æ–ª–∏").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }

            shopRolesService.deleteRole(role_id);
            event.reply("–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞").setEphemeral(true).queue();
        }

        if (event.getName().equals("check_coins")) {
            long id_user;
            if (event.getOption("id_user") != null) {
                id_user = Objects.requireNonNull(event.getOption("id_user")).getAsLong();
            } else {
                event.reply("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å id —Ä–æ–ª–∏").setEphemeral(true).queue();
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã");
                return;
            }
            Guild guild = event.getGuild();
            assert guild != null;
            Member member = guild.getMemberById(id_user);

            assert member != null;
            EmbedBuilder embed = new EmbedBuilder()
                    .setAuthor("\uD83D\uDD39" + member.getEffectiveName(), null)
                    .setColor(Color.CYAN) // –¶–≤–µ—Ç —Ä–∞–º–∫–∏
                    .addField("üí∞–ú–æ–Ω–µ—Ç—ã:", String.valueOf(userCoinService.getBalance(member.getIdLong())), false)
                    .setThumbnail(member.getEffectiveAvatarUrl())
                    .setTimestamp(Instant.now());

            event.replyEmbeds(embed.build()).setEphemeral(true).queue();
        }
    }

    @Override
    public void onStringSelectInteraction(StringSelectInteractionEvent event) {
        if (event.getComponentId().equals("shop:select")) {
            String selectedRoleId = event.getValues().get(0);
            Role selectedRole = Objects.requireNonNull(event.getGuild()).getRoleById(selectedRoleId);

            if (selectedRole != null) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ShopPurchaseManager.setUserSelectedRole(event.getUser().getIdLong(), selectedRoleId);
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
            event.deferEdit().queue();
        }
    }

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        if (event.getComponentId().equals("shop:buy")) {
            long userId = event.getUser().getIdLong();
            String selectedRoleId = ShopPurchaseManager.getUserSelectedRole(userId);
            Member member = Objects.requireNonNull(event.getGuild()).getMember(event.getUser());

            if (selectedRoleId == null) {
                event.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å!").setEphemeral(true).queue();
                return;
            }

            Role role = Objects.requireNonNull(event.getGuild()).getRoleById(selectedRoleId);
            if (role == null) {
                event.reply("–û—à–∏–±–∫–∞! –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            int roleCost = shopRolesService.getRolePriceById(Long.valueOf(selectedRoleId));
            int userBalance = userCoinService.getBalance(userId);

            if (userBalance < roleCost) {
                event.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: " + userBalance + " –º–æ–Ω–µ—Ç.").setEphemeral(true).queue();
                return;
            }

            if (member.getRoles().contains(role)) {
                event.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å: " + role.getName()).setEphemeral(true).queue();
                return;
            }

            // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –≤—ã–¥–∞–µ–º —Ä–æ–ª—å
            userCoinService.removeCoins(userId, roleCost);
            event.getGuild().addRoleToMember(member, role).queue();

            event.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å **" + role.getName() + "** –∑–∞ " + roleCost + " –º–æ–Ω–µ—Ç! üéâ")
                    .setEphemeral(true)
                    .queue();
        }
    }

    public static class ShopPurchaseManager {
        private static final Map<Long, String> userSelectedRoles = new HashMap<>();

        public static void setUserSelectedRole(long userId, String roleId) {
            userSelectedRoles.put(userId, roleId);
        }

        public static String getUserSelectedRole(long userId) {
            return userSelectedRoles.get(userId);
        }
    }
}
